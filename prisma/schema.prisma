// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户模型 - 支持需求方和程序员两种角色
model User {
  id              String   @id @default(cuid())
  openid          String?  @unique // 微信openid
  phone           String?  @unique // 手机号
  email           String?  @unique // 邮箱
  name            String?  // 昵称
  avatar          String?  // 头像URL
  role            UserRole @default(CLIENT) // 用户角色
  status          UserStatus @default(ACTIVE) // 用户状态
  verified        Boolean  @default(false) // 是否实名认证
  creditScore     Int      @default(100) // 信用分
  balance         Float    @default(0) // 账户余额
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 关联关系
  clientProfile   ClientProfile?
  developerProfile DeveloperProfile?
  postedProjects  Project[] @relation("ProjectClient")
  bids            Bid[]
  orders          Order[] @relation("OrderClient")
  payments        Payment[]
  withdrawals     Withdrawal[]
  reviewsFrom     Review[] @relation("ReviewFrom")
  reviewsTo       Review[] @relation("ReviewTo")
  assignedProjects Project[] @relation("ProjectDeveloper")
  developerOrders Order[] @relation("OrderDeveloper")

  @@map("users")
}

enum UserRole {
  CLIENT    // 需求方
  DEVELOPER // 程序员
  ADMIN     // 管理员
}

enum UserStatus {
  ACTIVE    // 正常
  SUSPENDED // 暂停
  BANNED    // 封禁
}

// 需求方资料
model ClientProfile {
  id           String @id @default(cuid())
  userId       String @unique
  company      String? // 公司名称
  industry     String? // 行业
  description  String? // 公司描述
  businessLicense String? // 营业执照URL
  
  user         User   @relation(fields: [userId], references: [id])
  
  @@map("client_profiles")
}

// 程序员资料
model DeveloperProfile {
  id            String @id @default(cuid())
  userId        String @unique
  bio           String? // 个人简介
  experience    Int?    // 工作经验（年）
  skills        String  // 技能标签，JSON格式存储
  portfolio     String? // 作品集，JSON格式存储
  github        String? // GitHub链接
  hourlyRate    Float?  // 时薪
  availability  Boolean @default(true) // 是否可接单
  level         DeveloperLevel @default(JUNIOR) // 开发者等级
  
  user          User   @relation(fields: [userId], references: [id])
  
  @@map("developer_profiles")
}

enum DeveloperLevel {
  JUNIOR   // 初级
  MIDDLE   // 中级
  SENIOR   // 高级
  EXPERT   // 专家
}

// 项目需求
model Project {
  id              String      @id @default(cuid())
  title           String
  description     String
  budget          Float       // 预算
  duration        Int         // 预计工期（天）
  techStack       String      // 技术栈，JSON格式
  attachments     String?     // 附件URL，JSON格式
  status          ProjectStatus @default(DRAFT)
  visibility      ProjectVisibility @default(PUBLIC) // 可见性
  priority        ProjectPriority @default(MEDIUM)
  clientId        String
  assignedTo      String?     // 指派的程序员ID
  deadline        DateTime?   // 截止日期
  viewCount       Int         @default(0) // 浏览次数
  bidCount        Int         @default(0) // 投标次数
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // 关联关系
  client          User        @relation("ProjectClient", fields: [clientId], references: [id])
  developer       User?       @relation("ProjectDeveloper", fields: [assignedTo], references: [id])
  bids            Bid[]
  orders          Order[]
  tags            ProjectTag[]

  @@map("projects")
}

enum ProjectStatus {
  DRAFT       // 草稿
  PUBLISHED   // 已发布
  BIDDING     // 招标中
  IN_PROGRESS // 进行中
  COMPLETED   // 已完成
  CANCELLED   // 已取消
  SUSPENDED   // 已暂停
}

enum ProjectVisibility {
  PUBLIC  // 公开
  PRIVATE // 私密
}

enum ProjectPriority {
  LOW    // 低
  MEDIUM // 中
  HIGH   // 高
  URGENT // 紧急
}

// 项目标签
model ProjectTag {
  id        String @id @default(cuid())
  projectId String
  tag       String
  
  project   Project @relation(fields: [projectId], references: [id])
  
  @@unique([projectId, tag])
  @@map("project_tags")
}

// 投标/抢单
model Bid {
  id          String    @id @default(cuid())
  projectId   String
  developerId String
  amount      Float     // 报价
  duration    Int       // 承诺工期（天）
  proposal    String    // 开发方案
  status      BidStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 关联关系
  project     Project   @relation(fields: [projectId], references: [id])
  developer   User      @relation(fields: [developerId], references: [id])
  
  @@unique([projectId, developerId])
  @@map("bids")
}

enum BidStatus {
  PENDING   // 待处理
  ACCEPTED  // 已接受
  REJECTED  // 已拒绝
  WITHDRAWN // 已撤回
}

// 订单
model Order {
  id            String      @id @default(cuid())
  orderNo       String      @unique // 订单号
  projectId     String
  clientId      String
  developerId   String
  bidId         String?     // 关联的投标ID
  amount        Float       // 订单金额
  status        OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(UNPAID)
  progress      Int         @default(0) // 进度百分比
  deadline      DateTime?   // 截止日期
  completedAt   DateTime?   // 完成时间
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // 关联关系
  project       Project     @relation(fields: [projectId], references: [id])
  client        User        @relation("OrderClient", fields: [clientId], references: [id])
  developer     User        @relation("OrderDeveloper", fields: [developerId], references: [id])
  reviews       Review[]
  payments      Payment[]
  deliverables  Deliverable[]

  @@map("orders")
}

enum OrderStatus {
  PENDING       // 待确认
  CONFIRMED     // 已确认
  IN_PROGRESS   // 进行中
  REVIEWING     // 待验收
  COMPLETED     // 已完成
  CANCELLED     // 已取消
  DISPUTED      // 争议中
}

enum PaymentStatus {
  UNPAID    // 未支付
  PAID      // 已支付
  REFUNDED  // 已退款
  PARTIAL   // 部分支付
}

// 交付物
model Deliverable {
  id          String   @id @default(cuid())
  orderId     String
  title       String
  description String?
  fileUrl     String?  // 文件URL
  status      DeliverableStatus @default(PENDING)
  submittedAt DateTime? // 提交时间
  reviewedAt  DateTime? // 审核时间
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  order       Order    @relation(fields: [orderId], references: [id])
  
  @@map("deliverables")
}

enum DeliverableStatus {
  PENDING    // 待提交
  SUBMITTED  // 已提交
  APPROVED   // 已通过
  REJECTED   // 已拒绝
}

// 评价
model Review {
  id          String   @id @default(cuid())
  orderId     String
  fromUserId  String
  toUserId    String
  rating      Int      // 评分 1-5
  comment     String?  // 评价内容
  tags        String?  // 评价标签，JSON格式
  createdAt   DateTime @default(now())

  // 关联关系
  order       Order    @relation(fields: [orderId], references: [id])
  fromUser    User     @relation("ReviewFrom", fields: [fromUserId], references: [id])
  toUser      User     @relation("ReviewTo", fields: [toUserId], references: [id])
  
  @@unique([orderId, fromUserId, toUserId])
  @@map("reviews")
}

// 支付记录
model Payment {
  id            String        @id @default(cuid())
  orderId       String
  userId        String
  amount        Float
  paymentMethod PaymentMethod
  transactionId String?       // 第三方交易ID
  status        PaymentStatus @default(UNPAID)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // 关联关系
  order         Order         @relation(fields: [orderId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  
  @@map("payments")
}

enum PaymentMethod {
  WECHAT    // 微信支付
  ALIPAY    // 支付宝
  BANK      // 银行转账
  BALANCE   // 余额支付
}

// 提现记录
model Withdrawal {
  id            String           @id @default(cuid())
  userId        String
  amount        Float
  method        WithdrawalMethod
  accountInfo   String           // 账户信息
  status        WithdrawalStatus @default(PENDING)
  processedAt   DateTime?        // 处理时间
  remark        String?          // 备注
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // 关联关系
  user          User             @relation(fields: [userId], references: [id])
  
  @@map("withdrawals")
}

enum WithdrawalMethod {
  WECHAT    // 微信零钱
  BANK      // 银行卡
}

enum WithdrawalStatus {
  PENDING    // 待处理
  APPROVED   // 已批准
  REJECTED   // 已拒绝
  PROCESSING // 处理中
  COMPLETED  // 已完成
}

// 系统配置
model SystemConfig {
  id          String @id @default(cuid())
  key         String @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  
  @@map("system_configs")
}